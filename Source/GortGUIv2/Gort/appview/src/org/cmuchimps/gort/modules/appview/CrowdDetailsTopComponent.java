/*
   Copyright 2014 Shahriyar Amini

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package org.cmuchimps.gort.modules.appview;

import java.awt.Color;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.cmuchimps.gort.api.gort.GestureCollection;
import org.cmuchimps.gort.modules.appview.components.Colors;
import org.cmuchimps.gort.modules.dataobject.CrowdTask;
import org.cmuchimps.gort.modules.dataobject.HIT;
import org.cmuchimps.gort.modules.helper.TaintHelper;
import org.netbeans.api.print.PrintManager;
import org.netbeans.api.project.Project;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.WeakListeners;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.cmuchimps.gort.modules.appview//CrowdDetails//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "CrowdDetailsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.cmuchimps.gort.modules.appview.CrowdDetailsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CrowdDetailsAction",
        preferredID = "CrowdDetailsTopComponent")
@Messages({
    "CTL_CrowdDetailsAction=Crowd Details",
    "CTL_CrowdDetailsTopComponent=Crowd Details",
    "HINT_CrowdDetailsTopComponent=This is a Crowd Details window"
})
public final class CrowdDetailsTopComponent extends TopComponent implements LookupListener, PropertyChangeListener {

    private static final String TEXT_YES = "Yes";
    private static final String TEXT_NO = "No";
    private static final String TEXT_UNKNOWN = "Unknown";
    
    private static CrowdDetailsTopComponent instance = null;
    
    private Result<CrowdTask> lookupResult;
    
    private CrowdTopComponent associatedTopComponent;
    
    public CrowdDetailsTopComponent() {
        initComponents();
        setName(Bundle.CTL_CrowdDetailsTopComponent());
        setToolTipText(Bundle.HINT_CrowdDetailsTopComponent());
        
        // make the topcomponent printable
        putClientProperty(PrintManager.PRINT_PRINTABLE, Boolean.TRUE); 

        // Add a listener to this so that we can update
        TopComponent.Registry reg = TopComponent.getRegistry();
        reg.addPropertyChangeListener(WeakListeners.propertyChange(this, reg));
    }
    
    public static synchronized CrowdDetailsTopComponent getInstance() {
        if (instance == null) {
            TopComponent tc = WindowManager.getDefault().findTopComponent("CrowdDetailsTopComponent");
            if (tc != null && tc instanceof CrowdDetailsTopComponent) {
                instance = (CrowdDetailsTopComponent) tc;
            } else {
                instance = new CrowdDetailsTopComponent();
            }
        }
        
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tasksPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        selectedTaskLabel = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jLabel4 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        resourcesLabel = new javax.swing.JLabel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jLabel6 = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        expectedLabel = new javax.swing.JLabel();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jLabel8 = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        comfortLabel = new javax.swing.JLabel();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jLabel1 = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        taskLabels = new javax.swing.JLabel();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        applicationTransitionPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        imageLabel1 = new javax.swing.JLabel();
        imageLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(400, 300));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        tasksPanel.setBackground(new java.awt.Color(255, 255, 255));
        tasksPanel.setMinimumSize(new java.awt.Dimension(200, 0));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(250, 235));
        jPanel2.setMinimumSize(new java.awt.Dimension(250, 235));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 235));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel3.text")); // NOI18N
        jPanel2.add(jLabel3);
        jPanel2.add(filler1);

        org.openide.awt.Mnemonics.setLocalizedText(selectedTaskLabel, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.selectedTaskLabel.text")); // NOI18N
        jPanel2.add(selectedTaskLabel);
        jPanel2.add(filler6);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel4.text")); // NOI18N
        jPanel2.add(jLabel4);
        jPanel2.add(filler2);

        org.openide.awt.Mnemonics.setLocalizedText(resourcesLabel, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.resourcesLabel.text")); // NOI18N
        jPanel2.add(resourcesLabel);
        jPanel2.add(filler7);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel6.text")); // NOI18N
        jPanel2.add(jLabel6);
        jPanel2.add(filler3);

        org.openide.awt.Mnemonics.setLocalizedText(expectedLabel, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.expectedLabel.text")); // NOI18N
        jPanel2.add(expectedLabel);
        jPanel2.add(filler8);

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel8.text")); // NOI18N
        jPanel2.add(jLabel8);
        jPanel2.add(filler4);

        org.openide.awt.Mnemonics.setLocalizedText(comfortLabel, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.comfortLabel.text")); // NOI18N
        jPanel2.add(comfortLabel);
        jPanel2.add(filler10);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel1.text")); // NOI18N
        jPanel2.add(jLabel1);
        jPanel2.add(filler5);

        org.openide.awt.Mnemonics.setLocalizedText(taskLabels, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.taskLabels.text")); // NOI18N
        jPanel2.add(taskLabels);
        jPanel2.add(filler9);

        javax.swing.GroupLayout tasksPanelLayout = new javax.swing.GroupLayout(tasksPanel);
        tasksPanel.setLayout(tasksPanelLayout);
        tasksPanelLayout.setHorizontalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tasksPanelLayout.setVerticalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(tasksPanel, java.awt.BorderLayout.LINE_START);

        applicationTransitionPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(imageLabel1, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.imageLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(imageLabel2, org.openide.util.NbBundle.getMessage(CrowdDetailsTopComponent.class, "CrowdDetailsTopComponent.imageLabel2.text")); // NOI18N

        javax.swing.GroupLayout applicationTransitionPanelLayout = new javax.swing.GroupLayout(applicationTransitionPanel);
        applicationTransitionPanel.setLayout(applicationTransitionPanelLayout);
        applicationTransitionPanelLayout.setHorizontalGroup(
            applicationTransitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationTransitionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(applicationTransitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(applicationTransitionPanelLayout.createSequentialGroup()
                        .addComponent(imageLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(imageLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        applicationTransitionPanelLayout.setVerticalGroup(
            applicationTransitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationTransitionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(applicationTransitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageLabel1)
                    .addComponent(imageLabel2))
                .addContainerGap(256, Short.MAX_VALUE))
        );

        jPanel1.add(applicationTransitionPanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel applicationTransitionPanel;
    private javax.swing.JLabel comfortLabel;
    private javax.swing.JLabel expectedLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JLabel imageLabel1;
    private javax.swing.JLabel imageLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel resourcesLabel;
    private javax.swing.JLabel selectedTaskLabel;
    private javax.swing.JLabel taskLabels;
    private javax.swing.JPanel tasksPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        GestureCollection.getInstance().topComponentOpened(this.getClass());
        super.componentOpened();
    }

    @Override
    public void componentClosed() {
        GestureCollection.getInstance().topComponentClosed(this.getClass());
        super.componentClosed();
    }

    @Override
    protected void componentShowing() {
        GestureCollection.getInstance().topComponentShowing(this.getClass());
        super.componentShowing();
    }

    @Override
    protected void componentHidden() {
        GestureCollection.getInstance().topComponentHidden(this.getClass());
        super.componentHidden();
    }

    @Override
    protected void componentActivated() {
        GestureCollection.getInstance().topComponentActivated(this.getClass());
        super.componentActivated(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    protected void componentDeactivated() {
        GestureCollection.getInstance().topComponentDeactivated(this.getClass());
        super.componentDeactivated(); //To change body of generated methods, choose Tools | Templates.
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (le == null) {
            return;
        }
        
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        
        if (c == null || c.isEmpty()) {
            return;
        }
        
        Object o = c.iterator().next();
        
        if (o == null || !(o instanceof CrowdTask)) {
            return;
        }
        
        CrowdTask ct = (CrowdTask) o;
        
        Project project = associatedTopComponent.getProject();
        
        update(project, ct);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        //System.out.println("CrowdDetail propertyChange called");
        
        if (evt == null) {
            return;
        }
        
        Set<TopComponent> opened = TopComponent.getRegistry().getOpened();
        
        boolean removeListener = false;
        
        if (opened == null || opened.isEmpty()) {
            removeListener = true;
        } else {
            removeListener = true;
            
            for (TopComponent tc : opened) {
                if (tc instanceof CrowdTopComponent) {
                    CrowdTopComponent c = (CrowdTopComponent) tc;
                    if (c.isShowing()) {
                        removeListener = false;
                        associatedTopComponent = c;
                        lookupResult = associatedTopComponent.getLookup().lookupResult(CrowdTask.class);
                        lookupResult.addLookupListener(this);
                        break;
                    }
                }
            }
        }
        
        // TODO: check if adding multiple times causes a problem.
        if (removeListener && lookupResult != null) {
            lookupResult.removeLookupListener(this);
        }
    }
    
    private void clear() {
        this.imageLabel1.setIcon(null);
        this.imageLabel2.setIcon(null);
        this.selectedTaskLabel.setText(" ");
        this.resourcesLabel.setText(" ");
        this.expectedLabel.setText(" ");
        this.comfortLabel.setText(" ");
        this.taskLabels.setText(" ");
    }
    
    //private static final double IMG_HEIGHT = 384;
    private static final double IMG_HEIGHT = 512;
    
    private void update(Project project, CrowdTask ct) {
        //System.out.println("CrowdDetailsTopComponent details called.");
        
        if (ct == null) {
            return;
        }
        
        clear();
        
        String selectedTask = ct.getSelectedLabel();
        String labels = ct.getLabels();
        String resources = TaintHelper.crowdDefinitionsFromTag(ct.getCombinedTaintTag());
        Double mean = ct.getComfortAverage();
        Double stddev = ct.getComfortStdDev();
        Boolean expected = ct.getExpectedMedian();
        
        if (selectedTask == null || selectedTask.isEmpty()) {
            HIT h = ct.getResourceJustificationHIT();
            if (h != null) {
                selectedTask = h.getInput();
            }
        }
        
        if (labels == null) {
            HIT h = ct.getTaskVerificationHIT();
            if (h != null) {
                labels = h.getInput();
            }
        }
        
        String[] labelsSplit = null;
        
        if (labels != null && !labels.isEmpty()) {
            labelsSplit = labels.split("\\|\\|");
        }
        
        if (selectedTask != null) {
            selectedTaskLabel.setText(String.format("<html>%s</html>", selectedTask));
        }
        
        if (resources != null) {
            resourcesLabel.setText(String.format("<html>%s</html>", resources));
        }
        
        if (mean != null && stddev != null) {
            String color = "#000000";
            if (mean > 0) {
                color = "#008000";
            } else if (mean < 0) {
                color = "#ff0000";
            }
            
            String comfort = String.format(
                    "<html>N=%s, (&mu;=<font color='%s'>%.1f</font>, &sigma;=%.1f)</html>",
                    (ct.getValid() != null) ? "" + ct.getValid() : "?",
                    color,
                    mean.doubleValue(),
                    stddev.doubleValue()
                    );
            comfortLabel.setText(comfort);
        }
        
        if (Boolean.TRUE.equals(expected)) {
            expectedLabel.setText(TEXT_YES);
            expectedLabel.setForeground(Colors.CUSTOM_GREEN);
        } else if (Boolean.FALSE.equals(expected)) {
            expectedLabel.setText(TEXT_NO);
            expectedLabel.setForeground(Color.RED);
        } else {
            expectedLabel.setText(TEXT_UNKNOWN);
            expectedLabel.setForeground(Color.BLACK);
        }
        
        if (labelsSplit != null && labelsSplit.length > 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("<html>");
            for (String s : labelsSplit) {
                
                if (s.equals("DESCRIPTION_NONE")) {
                    continue;
                }
                
                sb.append("* ");
                sb.append(s.replace('\t', ' ').trim());
                sb.append("<br/>");
                
                /*
                sb.append("<li>");
                sb.append(s.replace('\t', ' ').trim());
                sb.append("<li/>");
                * */
            }
            sb.append("</html>");
            
            taskLabels.setText(sb.toString());
        }
        // update the images
        String startScreenshot = ct.getStartScreenshot().getDefaultHeightPath();
        String endScreenshot = ct.getEndScreenshot().getDefaultHeightPath();
        
        // if we have access to the project also load up the images
        if (project == null) {
            System.out.println("No project to get image data.");
            return;
        }
        
        FileObject projDir = project.getProjectDirectory();
        
        if (projDir == null) {
            return;
        }
        
        FileObject s0 = projDir.getFileObject(startScreenshot);
        FileObject s1 = projDir.getFileObject(endScreenshot);
        
        
        if (s0 == null && s1 == null) {
            // do nothing
            System.out.println("Both transition screenshots are null.");
        } else if (s0 != null && s1 != null) {
            boolean success = setImage(imageLabel1, s0);
            
            if (!success) {
                setImage(imageLabel1, s1);
            } else {
                setImage(imageLabel2, s1);
            }
            
        } else {
            FileObject main = (s0 != null) ? s0 : s1;
            setImage(imageLabel1, main);
        }
    }
    
    private boolean setImage(JLabel label, FileObject fo) {
        if (label == null || fo == null) {
            return false;
        }
        
        File f = FileUtil.toFile(fo);
        
        if (f == null) {
            return false;
        }
        
        Image img;
        try {
            img = ImageIO.read(f);
            ImageIcon icon = new ImageIcon(img);
            
            double factor = (double) icon.getIconHeight() / IMG_HEIGHT;
            
            if (factor <= 1) {
                label.setIcon(icon);
            } else {
                int width = (int) ((double) icon.getIconWidth() / factor);
                img = img.getScaledInstance(width, (int) IMG_HEIGHT, Image.SCALE_DEFAULT);
                icon = new ImageIcon(img);
                label.setIcon(icon);
            }
            
            return true;
        } catch (IOException ex) {
            System.out.println("Error reading image...");
            return false;
        }
    }
}
