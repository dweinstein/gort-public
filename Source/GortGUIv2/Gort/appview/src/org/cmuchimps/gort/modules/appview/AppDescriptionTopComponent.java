/*
   Copyright 2014 Shahriyar Amini

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package org.cmuchimps.gort.modules.appview;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.concurrent.ExecutionException;
import javax.swing.JEditorPane;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;
import org.cmuchimps.gort.api.gort.GestureCollection;
import org.cmuchimps.gort.api.gort.GortDatabaseService;
import org.cmuchimps.gort.api.gort.WebInfoService;
import org.cmuchimps.gort.modules.dataobject.App;
import org.cmuchimps.gort.modules.dataobject.GortEntityManager;
import org.netbeans.api.project.Project;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.WeakListeners;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.cmuchimps.gort.modules.appview//AppDescription//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "AppDescriptionTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.cmuchimps.gort.modules.appview.AppDescriptionTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AppDescriptionAction",
        preferredID = "AppDescriptionTopComponent")
@Messages({
    "CTL_AppDescriptionAction=App Description",
    "CTL_AppDescriptionTopComponent=App Description",
    "HINT_AppDescriptionTopComponent=This is a AppDescription window",
    "MSG_NoAppPackage=Cannot fetch the app description without its package name. Run static analysis for the app."
})
public final class AppDescriptionTopComponent extends TopComponent implements
        PropertyChangeListener {

    private static final String CONTENT_TYPE = "text/html";
    private static final String DEFAULT_MODE = "output";
    
    private JEditorPane descEditorPane;
    
    public AppDescriptionTopComponent() {
        initComponents();
        setName(Bundle.CTL_AppDescriptionTopComponent());
        setToolTipText(Bundle.HINT_AppDescriptionTopComponent());
        
        descEditorPane = new JEditorPane();
        descEditorPane.setContentType(CONTENT_TYPE);
        
        // stop the text area from auto scrolling to bottom
        DefaultCaret caret = (DefaultCaret) descEditorPane.getCaret();
        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        
        // set the view port of the description to this editor pane
        descScrollPane.getViewport().add(descEditorPane);
        
        // Add a listener to this so that we can update the app description
        TopComponent.Registry reg = TopComponent.getRegistry();
        reg.addPropertyChangeListener(WeakListeners.propertyChange(this, reg));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descScrollPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane descScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        GestureCollection.getInstance().topComponentOpened(this.getClass());
        super.componentOpened();
    }

    @Override
    public void componentClosed() {
        GestureCollection.getInstance().topComponentClosed(this.getClass());
        super.componentClosed();
    }

    @Override
    protected void componentShowing() {
        GestureCollection.getInstance().topComponentShowing(this.getClass());
        super.componentShowing();
    }

    @Override
    protected void componentHidden() {
        GestureCollection.getInstance().topComponentHidden(this.getClass());
        super.componentHidden();
    }

    @Override
    protected void componentActivated() {
        GestureCollection.getInstance().topComponentActivated(this.getClass());
        super.componentActivated(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    protected void componentDeactivated() {
        GestureCollection.getInstance().topComponentDeactivated(this.getClass());
        super.componentDeactivated(); //To change body of generated methods, choose Tools | Templates.
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
    
    @Override
    public void open() {
        Mode mode = WindowManager.getDefault().findMode(DEFAULT_MODE);
        if (mode != null) {
            mode.dockInto(this);
        }
        super.open();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt == null) {
            return;
        }
        
        if (!TopComponent.Registry.PROP_ACTIVATED.equals(evt.getPropertyName())) {
            return;
        }
        
        update();
    }
    
    private void clear() {
        if (descEditorPane != null) {
            descEditorPane.setText("");
        }
    }
    
    private void update() {
        TopComponent activated = TopComponent.getRegistry().getActivated();
        
        // follow checks to see whether the text for this component should
        // be updated at all
        if (activated == null) {
            return;
        } else if (activated instanceof AppViewCloneableTopComponent) {
            // continue
        } else if (activated == this) {
            String desc = descEditorPane.getText();
            if (desc == null || desc.isEmpty() || 
                    desc.equals(NbBundle.getMessage(AppDescriptionTopComponent.class, "MSG_NoAppPackage"))) {
                activated = AppViewCloneableTopComponent.getShowingAppView();
                if (activated == null) {
                    return;
                }
            } else {
                // already has a useful description
                return;
            }
        } else {
            return;
        }
        
        AppViewCloneableTopComponent appView = (AppViewCloneableTopComponent) activated;
        
        Project project = appView.getProject();
        FileObject fo = appView.getFileObject();
        
        clear();
        
        if (project == null || fo == null) {
            return;
        }
        
        GortDatabaseService gds = project.getLookup().lookup(GortDatabaseService.class);
        
        if (gds == null) {
            return;
        }
        
        final GortEntityManager gem = gds.getGortEntityManager();
        
        if (gem == null) {
            return;
        }
        
        final App app = gem.selectApp(fo.getNameExt());
        
        if (app == null) {
            return;
        }
        
        String desc = app.getDescription();
        
        if (desc != null) {
            descEditorPane.setText(desc);
            return;
        } else {
            System.out.println("No description for app in the database. Attemping web service fetch...");
        }
        
        // Attempt to get the describe from the WebInfoService
        final String package_ = app.getPackage();
        
        // cannot get the app description without package
        if (package_ == null) {
            descEditorPane.setText(NbBundle.getMessage(AppDescriptionTopComponent.class, "MSG_NoAppPackage"));
            return;
        } else {
            System.out.println("Fetching description for app with package " + package_);
        }
        
        SwingWorker sw = new SwingWorker<String, Void>() {

            @Override
            protected String doInBackground() throws Exception {
                WebInfoService wis = WebInfoService.getDefault();
                
                if (wis == null) {
                    return null;
                }
                
                return wis.appDescription(package_);
            }

            @Override
            protected void done() {
                String result = null;
                
                try {
                    result = this.get();
                } catch (InterruptedException ex) {
                    Exceptions.printStackTrace(ex);
                } catch (ExecutionException ex) {
                    Exceptions.printStackTrace(ex);
                }
                
                if (result == null || result.isEmpty()) {
                    return;
                }
                
                app.setDescription(result);
                gem.updateApp(app);
                
                descEditorPane.setText(result);
            }
            
        };
        
    }
}
